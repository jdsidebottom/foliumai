export default async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const apiKey = process.env.PLANT_ID_API_KEY;
  if (!apiKey) {
    return res.status(500).json({ error: 'API key not configured' });
  }

  try {
    const { images } = req.body;
    
    if (!images || !Array.isArray(images) || images.length === 0) {
      return res.status(400).json({ error: 'No images provided' });
    }

    console.log('Step 1: Submitting to Plant.id...');
    
    // Step 1: Submit identification job
    const submitResponse = await fetch('https://api.plant.id/v3/identification', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Api-Key': apiKey,
      },
      body: JSON.stringify({
        images: images,
        classification_level: 'all',
        similar_images: true,
        health: 'all'
      }),
    });

    console.log('Submit response status:', submitResponse.status);

    if (!submitResponse.ok) {
      const errorText = await submitResponse.text();
      return res.status(submitResponse.status).json({ 
        error: `Plant.id submission failed: ${submitResponse.status}`,
        details: errorText
      });
    }

    const submitData = await submitResponse.json();
    console.log('Job submitted successfully. Job ID:', submitData.id);

    const jobId = submitData.id;
    const accessToken = submitData.access_token;
    
    // Step 2: Poll for results
    let attempts = 0;
    const maxAttempts = 20; // 20 seconds max
    
    while (attempts < maxAttempts) {
      console.log(`Polling attempt ${attempts + 1}/${maxAttempts}...`);
      
      // Wait 1 second between polls
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const pollResponse = await fetch(`https://api.plant.id/v3/identification/${jobId}`, {
        method: 'GET',
        headers: {
          'Api-Key': apiKey,
          // Try both authorization methods
          'Authorization': `Bearer ${accessToken}`
        }
      });

      console.log(`Poll response status: ${pollResponse.status}`);

      if (pollResponse.ok) {
        const pollData = await pollResponse.json();
        console.log('Poll response preview:', JSON.stringify(pollData).substring(0, 200));
        
        // Check if results are ready
        if (pollData.result && pollData.result.classification && pollData.result.classification.suggestions) {
          console.log('✅ Plant identification completed!');
          return res.status(200).json(pollData);
        } else if (pollData.status === 'completed') {
          console.log('✅ Job completed!');
          return res.status(200).json(pollData);
        } else {
          console.log('⏳ Still processing, continuing to poll...');
        }
      } else {
        const errorText = await pollResponse.text();
        console.log(`❌ Poll failed: ${pollResponse.status} - ${errorText}`);
        
        // If unauthorized, try without Bearer token
        if (pollResponse.status === 401 && attempts === 0) {
          console.log('Trying poll without Bearer token...');
          const retryResponse = await fetch(`https://api.plant.id/v3/identification/${jobId}`, {
            method: 'GET',
            headers: {
              'Api-Key': apiKey
            }
          });
          
          if (retryResponse.ok) {
            const retryData = await retryResponse.json();
            if (retryData.result && retryData.result.classification) {
              return res.status(200).json(retryData);
            }
          }
        }
      }
      
      attempts++;
    }

    // Timeout
    return res.status(408).json({ 
      error: 'Plant identification timed out',
      details: `Processing took longer than ${maxAttempts} seconds`,
      job_id: jobId
    });

  } catch (error) {
    console.error('Server error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message
    });
  }
}
